#include<stdio.h>
#include<limits.h>
#define MAX 20
#define INF 999
int dist[MAX],visited[MAX],path[MAX],source;
void dj(int n,int graph[MAX][MAX])
{
int i,u,v;
for(i=1;i<=n;i++)
{
visited[i]=0;
}
visited[source]=1;
for(i=1;i<=n;i++)
{
dist[i]=graph[source][i];
}
for(i=1;i<=n;i++)
{
path[i]=source;
}
path[source]=-1;
for(i=1;i<n;i++)
{
u=min(n);
visited[u]=1;
for(v=1;v<=n;v++)
{
if(!visited[v] && graph[u][v] && dist[u]!=INF && dist[u]+graph[u][v]<dist[v])
{
dist[v]=dist[u]+graph[u][v];
path[v]=u;
}
}
}
}
 int min(int n)
 {
 int min=INF ,minindex=-1,i;
 for(i=1;i<=n;i++)
 {
 if(visited[i]==0 && dist[i]<=min)
 {
 min=dist[i];
 minindex=i;
 }
 }
 return minindex;
 }
 
 void pfpath(int path[],int j)
{
if(path[j]==-1)
{
return;
}
pfpath(path,path[j]);
printf("--> %d",j);
}

void shortest(int n)
{
int i;
for(i=1;i<=n;i++)
{
if(i!=source)
{
printf("Shortest distance from node %d to %d=%d\n",source,i,dist[i]);
printf("Shortest path from node %d to %d is :",source,i);
printf("%d",source);
pfpath(path,i);
printf("\n");
}
}
}


int main()
{
int i,j,n;
int graph[MAX][MAX];
printf("Enter no of nodes:");
scanf("%d",&n);
printf("Enter weight matrix:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
scanf("%d",&graph[i][j]);
}
}
printf("Enter source vertex:");
scanf("%d",&source);
dj(n,graph);
shortest(n);
return 0;
}
